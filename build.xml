<?xml version="1.0"?>

<!--
 - Build file for Fulcrum Genomic's tools for manipulating genomic data.
-->

<project name="JeanLuc" basedir="." default="all">
    <property name="src" value="src/java"/>
    <property name="src.test" value="src/tests/java"/>
    <property name="scripts" value="src/scripts"/>
    <property name="lib" value="lib"/>
    <property name="dist" value="dist"/>
    <property name="classes" value="classes"/>
    <property name="classes.test" value="testclasses"/>
    <property name="tmp"  value="tmp"/>
    <property name="test.output" value="dist/test"/>

    <!-- Settings for Picard and HTSJDK -->
    <property name="picard" value="picard"/>
    <property name="picard-lib-dir" value="${dist}/picard_lib_dir"/>
    <property name="picard-git-url" value="git@github.com:broadinstitute/picard.git"/>
    <property name="picard-url" value="https://github.com/broadinstitute/picard/archive"/>
    <property name="htsjdk-url" value="https://github.com/samtools/htsjdk/archive"/>
    <property name="htsjdk-classes" value="${picard}/htsjdk/classes"/>
    <property name="picard-classes" value="${picard}/classes"/>
    <property name="picard-testclasses" value="${picard}/testclasses"/>
    <property name="picard-githash" value="master"/>
    <property name="htsjdk-githash" value="master"/>
    
    <!-- Testing settings -->
    <property name="testng.verbosity" value="2"/>

    <!-- Javac settings -->
    <property name="javac.target" value="1.8"/>
    <property name="javac.debug" value="true"/>

    <!-- Get GIT hash, if available, otherwise leave it blank.  -->
    <exec executable="git" outputproperty="repository.revision" failifexecutionfails="true" errorproperty="">
        <arg value="log"/>
        <arg value="-1"/>
        <arg value="--pretty=format:%H_%at"/>
    </exec>
    <property name="repository.revision" value=""/>

    <!-- Check if Picard exists -->
    <target name="check-picard">
        <available file="${picard}" type="dir" property="picard.public.present"/>
    </target>

    <!-- INIT -->
    <target name="init">
        <path id="classpath">
            <fileset dir="${lib}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${picard-lib-dir}">
                <include name="**/*.jar"/>
            </fileset>
        </path>
    </target>

    <!-- CLEAN -->
    <target name="clean-picard-if-exists" depends="check-picard" if="${picard.present}">
        <antcall target="clean-picard" inheritall="true"/>
    </target>

    <target name="clean" depends="clean-picard-if-exists">
        <delete dir="${classes}"/>
        <delete dir="${dist}"/>
        <delete dir="${classes.test}"/>
        <delete dir="${test.output}"/>
    </target>

    <!-- Set PICARD and HTSJDK version -->

    <!-- Gets the info on the current branch from git and sets it in htsjdk.version -->
    <target name="set-htsjdk-version">
        <!-- TODO: do not hard code in htsjdk directory -->
        <exec executable="sh" dir="${picard}/htsjdk" outputproperty="htsjdk-version">
            <arg value="-c"/>
            <arg value="git log -1 --pretty=format:%H_%at"/>
        </exec>
        <echo>Setting htsjdk-version to ${htsjdk-version}</echo>
    </target>

    <!-- Gets the info on the current branch from git and sets it in picard-version -->
    <target name="set-picard-version">
        <exec executable="sh" dir="${picard}" outputproperty="picard-version">
            <arg value="-c"/>
            <arg value="git log -1 --pretty=format:%H_%at"/>
        </exec>
        <echo>Setting picard-version to ${picard-version}</echo>
    </target>

    <!-- CLONE Picard and Htsjdk -->
    <target name="clone-picard" description="Download Picard sources from Github">
        <exec executable="git" failonerror="true">
            <arg value="clone"/>
            <arg value="${picard-git-url}"/>
            <arg value="${picard}"/>
        </exec>
        <exec dir="${picard}" executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="${picard-githash}"/>
        </exec>
        <ant antfile="build.xml" dir="${picard}" target="clone-htsjdk" inheritall="false"/>
        <exec dir="${picard}/htsjdk" executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="${htsjdk-githash}"/>
        </exec>
    </target>
    
    <!-- DOWNLOAD Picard and Htsjdk -->
    <target name="download-picard" description="Download Picard sources from Github">
        <!-- download a specific commit from picard -->
        <exec executable="wget" failonerror="true">
            <arg value="-q"/>
            <arg value="${picard-url}/${picard-githash}.tar.gz"/>
        </exec>
        <!-- extract the picard tarball -->
        <exec executable="tar" failonerror="true">
            <arg value="-zxf"/>
            <arg value="${picard-githash}.tar.gz"/>
        </exec>
        <!-- move picard into place -->
        <move todir="${picard}">
            <fileset dir="picard-${picard-githash}"/>
        </move>
        <!-- delete the picard tarball -->
        <delete dir="${picard-githash}.tar.gz"/>
        <!-- download a specific commit from htsjdk -->
        <exec dir="${picard}" executable="wget" failonerror="true">
            <arg value="-q"/>
            <arg value="${htsjdk-url}/${htsjdk-githash}.tar.gz"/>
        </exec>
        <!-- extract the htsjdk tarball -->
        <exec dir="${picard}" executable="tar" failonerror="true">
            <arg value="-zxf"/>
            <arg value="${htsjdk-githash}.tar.gz"/>
        </exec>
        <!-- move htsjdk into place -->
        <move todir="${picard}/htsjdk">
            <fileset dir="${picard}/htsjdk-${htsjdk-githash}"/>
        </move>
        <!-- delete the htsjdk tarball -->
        <delete dir="${picard}/${htsjdk-githash}.tar.gz"/>
    </target>

    <!-- COMPILE -->
    <target name="build-picard" depends="set-picard-version, set-htsjdk-version" description="Build Picard, and grab build jars">
        <ant antfile="build.xml" dir="${picard}" target="clean" inheritall="false"/>
        <ant antfile="build.xml" dir="${picard}" target="all" inheritall="false"/>
        <copy todir="${picard-lib-dir}">
            <fileset dir="${picard}/dist" includes="**/*-*.jar"/>
            <fileset dir="${picard}/lib" includes="*.jar"/>
            <fileset dir="${picard}/dist/htsjdk_lib_dir" includes="**/*-*.jar" />
        </copy>
        <copy todir="${dist}">
            <fileset dir="${picard}/dist" includes="**/*.jar" excludes="**/*-*.jar"/>
        </copy>
    </target>

    <target name="compile" depends="init, build-picard" description="Compile files without cleaning">
        <mkdir dir="${classes}"/>

        <javac destdir="${classes}"
               debug="${javac.debug}"
               sourcepath=""
               srcdir="${src}"
               includes="**/*.java"
               source="${javac.target}"
               target="${javac.target}"
               includeantruntime="false">
            <classpath refid="classpath"/>
        </javac>
        <compile-tests includes="com/**/*.*"/>
    </target>

    <target name="jar" depends="compile" description="Builds the main executable jar">
        <mkdir dir="${tmp}"/>
        <unjar dest="${tmp}">
            <fileset dir="${lib}" includes="*.jar"/>
            <fileset dir="${picard-lib-dir}">
                <include name="**/*.jar"/>
                <exclude name="**/picard-annotations.jar"/>
            </fileset>
        </unjar>

        <mkdir dir="${dist}"/>
        <jar destfile="${dist}/jeanluc.jar" compress="no">
            <fileset dir="${classes}" includes="**/*"/>
            <fileset dir="${scripts}" includes="**/*.R"/>
            <fileset dir="${tmp}" includes="**/*"/>
            <manifest>
                <attribute name="Implementation-Version" value="${repository.revision}"/>
                <attribute name="Implementation-Vendor" value="Fulcrum Genomics"/>
                <attribute name="Main-Class" value="com.fulcrumgenomics.cmdline.Main"/>
                <attribute name="Implementation-Title" value="Fulcrum Genomic's BFX Tools"/>
                <attribute name="Picard-Version" value="${picard-version}"/>
                <attribute name="HTSJDK-Version" value="${htsjdk-version}"/>
            </manifest>
        </jar>

        <delete dir="${tmp}"/>
    </target>

    <!-- ALL -->
    <target name="all" depends="jar"  description="Default build target"/>
    
    <!-- TEST -->
    <target name="test" depends="compile" description="Run unit tests">
        <taskdef resource="testngtasks" classpathref="classpath"/>
        <testng suitename="jeanluc-tests" classpathref="classpath" outputdir="${test.output}"
            failureproperty="tests.failed" workingDir="${basedir}"
            verbose="${testng.verbosity}">
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${classes.test}"/>
                <pathelement location="${picard-testclasses}"/>
                <pathelement path="${scripts}"/>
            </classpath>
            <classfileset dir="${classes.test}">
                <include name="**/Test*.class"/>
                <include name="**/*Test.class"/>
            </classfileset>
            <jvmarg value="-Xmx2G"/>
        </testng>
        <junitreport todir="${dist}/test">
            <fileset dir="${test.output}">
                <include name="*.xml"/>
            </fileset>
            <report format="noframes" todir="${dist}/test" styledir="etc/test"/>
        </junitreport>
        <copy file="etc/test/testng.css" todir="${dist}/test" overwrite="true"/>
        <fail if="tests.failed" message="There were failed unit tests"/>
    </target>

    <macrodef name="compile-tests">
        <attribute name="includes" default=""/>
        <attribute name="excludes" default=""/>
        <attribute name="compiler.args" default=""/>

        <sequential>
            <mkdir dir="${classes.test}"/>
            <javac destdir="${classes.test}"
                optimize="${javac.opt}"
                debug="${javac.debug}"
                srcdir="${src.test}"
                includes="@{includes}"
                excludes="@{excludes}"
                source="${javac.target}"
                target="${javac.target}">
                <classpath>
                    <path refid="classpath"/>
                    <pathelement location="${classes}"/>
                    <pathelement location="${picard-testclasses}"/>
                </classpath>
                <compilerarg line="@{compiler.args}"/>
            </javac>
        </sequential>
    </macrodef>
</project>
